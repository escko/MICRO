#include <dt-bindings/zmk/keys.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/mouse.h>
#include <dt-bindings/zmk/rgb.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/ext_power.h>

#define KRITA 0
#define INFINITE 1
#define ARTSTUDIO 2
#define ENCODER 3
#define LAYERS 4
#define ROTATE 5
#define VIEW 6
#define HISTORY 7
#define CENTERLEFT 8
#define MEDIA 9
#define BLUE 10

&lt {
    tapping-term-ms = <135>;
    quick-tap-ms = <100>;
};

&mt {
    tapping-term-ms = <135>;
    quick-tap-ms = <100>;
    flavor = "tap-preferred";
};

// time to max speed ms was 1000 //
#define ZMK_MOUSE_DEFAULT_SCRL_VAL 130  // 10
//#define MOUSE_SCROLL_MAX 250
&msc {
    acceleration-exponent = <0>;      // 0
    time-to-max-speed-ms = <0>;       // 300
    delay-ms = <0>;                   // 0
};


/ {
    /delete-node/ encoder;
};

&pinctrl {
    qdec_default: qdec_default {
        group1 {
            psels = <NRF_PSEL(QDEC_A, 1, 4)>,
                    <NRF_PSEL(QDEC_B, 1, 6)>;
            bias-pull-up;
        };
    };


// need second set of pins defined if deep sleep is enabled
    qdec_sleep: qdec_sleep {
        group1 {
            psels = <NRF_PSEL(QDEC_A, 1, 4)>,
                    <NRF_PSEL(QDEC_B, 1, 6)>;
            bias-pull-up; // TODO: find out if this makes sense with low-power-enable
            low-power-enable;
        };
    };
};

  // Set up the QDEC hardware based driver and give it the same label as the deleted node.
encoder: &qdec0 {
    status = "okay";
    led-pre = <0>;
    steps = <18>;
    pinctrl-0 = <&qdec_default>;
    pinctrl-1 = <&qdec_sleep>;
    pinctrl-names = "default", "sleep";
};


/ { 
behaviors {
    motap: motap {
      compatible = "zmk,behavior-hold-tap";
      #binding-cells = <2>;
      flavor = "hold-preferred";
      tapping-term-ms = <300>;
      quick-tap-ms = <0>;
      hold-while-undecided;
      bindings = <&mo>, <&kp>;
      };
    mtr: mtr {
      compatible = "zmk,behavior-hold-tap";
      #binding-cells = <2>;
      flavor = "hold-preferred";
      tapping-term-ms = <230>;
      quick-tap-ms = <0>;
      hold-while-undecided;
      bindings = <&kp>, <&kp>;
      };
    mtrv: mtrv {
      compatible = "zmk,behavior-hold-tap";
      #binding-cells = <2>;
      flavor = "hold-preferred";
      tapping-term-ms = <230>;
      quick-tap-ms = <100>;
      hold-while-undecided;
      bindings = <&kp>, <&kp>;
      };
    mt0: mt0 {
      compatible = "zmk,behavior-hold-tap";
      #binding-cells = <2>;
      flavor = "hold-preferred";
      tapping-term-ms = <120>;
      quick-tap-ms = <100>;
      bindings = <&kp>, <&kp>;
      };
    mt1: mt1 {
      compatible = "zmk,behavior-hold-tap";
      #binding-cells = <2>;
      flavor = "hold-preferred"; // was hold-preferred
      tapping-term-ms = <145>;
      quick-tap-ms = <100>;
      bindings = <&kp>, <&kp>;
      };
    mt2: mt2 {
      compatible = "zmk,behavior-hold-tap";
      #binding-cells = <2>;
      flavor = "hold-preferred"; // was hold-preferred
      tapping-term-ms = <200>;
      quick-tap-ms = <100>;
      bindings = <&kp>, <&kp>;
      };
    mt3: mt3 {
      compatible = "zmk,behavior-hold-tap";
      #binding-cells = <2>;
      flavor = "hold-preferred"; // was hold-preferred
      tapping-term-ms = <300>;
      quick-tap-ms = <100>;
      bindings = <&kp>, <&kp>;
      };
    mt4: mt4 {
      compatible = "zmk,behavior-hold-tap";
      #binding-cells = <2>;
      flavor = "hold-preferred";
      tapping-term-ms = <380>;
      quick-tap-ms = <100>;
      bindings = <&kp>, <&kp>;
      };
    kp_mkp: kp_mkp {
      compatible = "zmk,behavior-hold-tap";
      #binding-cells = <2>;
      tapping-term-ms = <130>;
      quick-tap-ms = <100>;
      flavor = "hold-preferred";
      bindings = <&kp>, <&mkp>;
      };
    kp_mkp0: kp_mkp0 {
      compatible = "zmk,behavior-hold-tap";
      #binding-cells = <2>;
      tapping-term-ms = <180>;
      quick-tap-ms = <100>;
      flavor = "hold-preferred";
      bindings = <&kp>, <&mkp>;
      };
    mkp_kp: mkp_kp {
      compatible = "zmk,behavior-hold-tap";
      #binding-cells = <2>;
      tapping-term-ms = <200>;
      quick-tap-ms = <100>;
      flavor = "hold-preferred";
      bindings = <&mkp>, <&kp>;
      };
    mkp_mkp: mkp_mkp {
      compatible = "zmk,behavior-hold-tap";
      #binding-cells = <2>;
      tapping-term-ms = <200>;
      quick-tap-ms = <100>;
      flavor = "hold-preferred";
      bindings = <&mkp>, <&mkp>;
      };
    hwu: hwu {
      compatible = "zmk,behavior-hold-tap";
      #binding-cells = <2>;
      flavor = "hold-preferred";
      tapping-term-ms = <170>;
      hold-while-undecided;
      bindings = <&kp>, <&kp>;
      };  

    //  this works with R  //
    morph_lshft: morph_lshft {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp LG(R)>, <&hwu LS(LA(LGUI)) LA(LG(R))>;
            mods = <(MOD_LALT)>;
            keep-mods = <(MOD_LALT)>;
        };
    morph_r: morph_r {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp R>, <&morph_lshft>;
            mods = <(MOD_LGUI)>;
        };
        
// Use for combine lalt command //
    morph_qnest: morph_qnest {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&hwu LS(LGUI) LG(Q)>, <&hwu LS(LA(LGUI)) LA(LG(Q))>;
            mods = <(MOD_LALT)>;
            keep-mods = <(MOD_LALT)>;
        };
    morph_q: morph_q {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp Q>, <&morph_qnest>;
            mods = <(MOD_LGUI)>;
            keep-mods = <(MOD_LGUI)>;

        };


    morph_wnest: morph_wnest {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp LG(W)>, <&hwu LS(LA(LGUI)) LA(LG(W))>;
            mods = <(MOD_LALT)>;
            keep-mods = <(MOD_LALT)>;
        };
    morph_w: morph_w {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp W>, <&morph_wnest>;
            mods = <(MOD_LGUI)>;
        };


// current code //    
    morph_rshft: morph_rshft {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&hwu RSHFT R>, <&kp R>;
            mods = <(MOD_LALT|MOD_LSFT|MOD_LGUI)>;
            keep-mods = <(MOD_LALT|MOD_LSFT|MOD_LGUI)>;
      };   
    e_cmdz: e_cmdz {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp E>, <&kp LG(Z)>;
            mods = <(MOD_LALT)>;
      };     
    EE_CUTUNDO: EE_CUT {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp E>, <&kp LG(X)>;
            mods = <(MOD_LSFT)>;
      };
    EE_CUT: CCMDZ {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&EE_CUTUNDO>, <&kp LG(Z)>;
            mods = <(MOD_LGUI|MOD_RALT)>;
      };
    rgb_encoder: rgb_encoder {
      compatible = "zmk,behavior-sensor-rotate";
      #sensor-binding-cells = <0>;
      bindings = <&rgb_ug RGB_HUI>, <&rgb_ug RGB_HUD>;
      };
    rot_scroll: rot_scroll {
      compatible = "zmk,behavior-sensor-rotate-var";
      #sensor-binding-cells = <2>;
      bindings = <&msc>, <&msc>;
      tap-ms = <33>;
      }; 
    rot_kp: rot_kp {
      compatible = "zmk,behavior-sensor-rotate-var";
      #sensor-binding-cells = <2>;
      bindings = <&kp>, <&kp>;
      };
  };

    //   0   1   2   3 
    //   4   5   6   7   8 
    //           9   10  11
combos {
    compatible = "zmk,combos";
    INFINITE {
    timeout-ms = <50>;
    key-positions = < 0 1 2 9 >;
    bindings = <&tog INFINITE>;
      };
    ARTSTUDIO {
    timeout-ms = <50>;
    key-positions = < 4 5 6 9 >;
    bindings = <&tog ARTSTUDIO>;
      }; 
    LAYERS {
    timeout-ms = <50>;
    key-positions = < 0 1 >;
    bindings = <&motap LAYERS N3>;
      };
    MEDIA {
    timeout-ms = <50>;
    key-positions = < 0 4 >;
    bindings = <&motap MEDIA B>;
      };
    MOVE {
    timeout-ms = <50>;
    key-positions = < 1 2 >;
    bindings = <&kp J>;
      };
    PIN_ {
    timeout-ms = <50>;
    key-positions = < 0 1 2 3 11 >;
    bindings = <&kp LS(LC(LA(LG(N1))))>;
      };
    LAYER_SELECT {
    timeout-ms = <50>;
    key-positions = < 1 2 8 11 >;
    bindings = <&kp LA(LG(J))>;
      };
    HISTORY {
    timeout-ms = <50>;
    key-positions = < 2 5 >;
    bindings = <&mo HISTORY>;
      };
    VIEW {
    timeout-ms = <50>;
    key-positions = < 0 1 2 3 >;
    bindings = <&motap VIEW LG(N0)>;
      };
    ROTATE {
    timeout-ms = <50>;
    key-positions = < 0 3 >;
    bindings = <&motap ROTATE LG(EQUAL)>;
      };
    TAB_ESCAPE {
    timeout-ms = <50>;
    key-positions = < 0 3 11 >;
    bindings = <&mt4 TAB ESCAPE>;
      };
    DESELECT_ENTER {
    timeout-ms = <50>;
    key-positions = < 1 2 3 >;
    bindings = <&mt LG(D) ENTER>;
      };
    TRANSFORM {
    timeout-ms = <50>;
    key-positions = < 0 1 2 >;
    bindings = <&kp T>;
      }; 
    CENTERLEFT {
    timeout-ms = <50>;
    key-positions = < 4 5 >;
    bindings = <&motap CENTERLEFT Z>;
      };
    BLUE {
    timeout-ms = <50>;
    key-positions = < 4 9 >;
    bindings = <&mo BLUE>;
      };
    ELLIPSE {
    timeout-ms = <50>;
    key-positions = < 1 3 >;
    bindings = <&kp O>;
      };
    MARQUEE {
    timeout-ms = <50>;
    key-positions = < 0 2 >;
    bindings = <&kp K>;
      };
    SELECTION {
    timeout-ms = <50>;
    key-positions = < 2 3 >;
    bindings = <&kp L>;
      };
    POLYGONAL_SELECTION {
    timeout-ms = <50>;
    key-positions = < 2 6 >;
    bindings = <&kp I>;
      };
    MAGENETIC_SELECTION {
    timeout-ms = <50>;
    key-positions = < 1 6 >;
    bindings = <&kp U>;
      };
    OPTION_L {
    timeout-ms = <50>;
    key-positions = < 2 3 11 >;
    bindings = <&kp LA(L)>;
      };
    COMMAND_L {
    timeout-ms = <50>;
    key-positions = < 2 3 8 >;
    bindings = <&kp LG(L)>;
      };
    OPTION_COMMAND_L {
    timeout-ms = <50>;
    key-positions = < 2 3 8 11 >;
    bindings = <&kp LA(LG(L))>;
      };

    //   0   1   2   3 
    //   4   5   6   7   8 
    //           9   10  11

    COMMAND_W {
    timeout-ms = <50>;
    key-positions = < 1 8 >;
    bindings = <&kp LG(W)>;
      };
    COMMAND_E {
    timeout-ms = <50>;
    key-positions = < 2 8 >;
    bindings = <&kp LG(E)>;
      };
    COMMAND_R {
    timeout-ms = <50>;
    key-positions = < 3 8 >;
    bindings = <&kp LG(R)>;
      };
    COMMAND_F {
    timeout-ms = <50>;
    key-positions = < 6 8 >;
    bindings = <&kp LG(F)>;
      };
    OPTION_W {
    timeout-ms = <50>;
    key-positions = < 1 11 >;
    bindings = <&kp LA(W)>;
      };
    OPTION_E {
    timeout-ms = <50>;
    key-positions = < 2 11 >;
    bindings = <&kp LA(E)>;
      };
    OPTION_R {
    timeout-ms = <50>;
    key-positions = < 3 11 >;
    bindings = <&kp LA(R)>;
      };
    OPTION_F {
    timeout-ms = <50>;
    key-positions = < 6 11 >;
    bindings = <&kp LA(F)>;
      };
    SHIFT_Q {
    timeout-ms = <50>;
    key-positions = < 0 10 >;
    bindings = <&kp LS(Q)>;
      };
    SHIFT_W {
    timeout-ms = <50>;
    key-positions = < 1 10 >;
    bindings = <&kp LS(W)>;
      };
    SHIFT_E {
    timeout-ms = <50>;
    key-positions = < 2 10 >;
    bindings = <&kp LS(E)>;
      }; 
    SHIFT_R {
    timeout-ms = <50>;
    key-positions = < 3 10 >;
    bindings = <&kp LS(R)>;
      };
    CONTROL_SHIFT {
    timeout-ms = <50>;
    key-positions = < 4 10 >;
    bindings = <&kp LC(LSHFT)>;
      };
    CONTROL_OPTION {
    timeout-ms = <50>;
    key-positions = < 4 11 >;
    bindings = <&kp LC(LALT)>;
      };
    CONTROL_COMMAND {
    timeout-ms = <50>;
    key-positions = < 4 8 >;
    bindings = <&kp LC(LGUI)>;
      };
    SHIFT_OPTION {
    timeout-ms = <50>;
    key-positions = < 0 11 >;
    bindings = <&kp LS(LALT)>;
      };
    SHIFT_LGUI {
    timeout-ms = <50>;
    key-positions = < 0 8 >;
    bindings = <&kp LS(LGUI)>;
      };
    SHIFT_OPTION_COMMAND {
    timeout-ms = <50>;
    key-positions = < 0 8 11 >;
    bindings = <&kp LS(LA(LGUI))>;
      };
    CONTROL_OPTION_COMMAND {
    timeout-ms = <50>;
    key-positions = < 4 8 11 >;
    bindings = <&kp LC(LA(LGUI))>;
      };
    OPTION_COMMAND_R {
    timeout-ms = <50>;
    key-positions = < 3 8 11 >;
    bindings = <&kp LA(LG(R))>;
      };
    OPTION_COMMAND_F {
    timeout-ms = <50>;
    key-positions = < 6 8 11 >;
    bindings = <&kp LA(LG(F))>;
      };
    G_ {
    timeout-ms = <50>;
    key-positions = < 5 6 >;
    bindings = <&kp G>;
      };
    P_ {
    timeout-ms = <50>;
    key-positions = < 4 6 >;
    bindings = <&kp P>;
      };
    S_ {
    timeout-ms = <50>;
    key-positions = < 4 5 6 >;
    bindings = <&kp S>;
      };
    OPTION_COMMAND {
    timeout-ms = <50>;
    key-positions = < 8 11 >;
    bindings = <&hwu LA(LGUI) N5>;
      };
    SETTINGS {
    timeout-ms = <50>;
    key-positions = < 9 10 >;
    bindings = <&kp LG(COMMA)>;
      };
    };
//   13-0    13-1    17-2    14-3    14-8    16-11   //

    //   0   1   2   3 
    //   4   5   6   7   8 
    //           9   10  11
 keymap {
    compatible = "zmk,keymap";

    KRITA {
    bindings = <
    &morph_q &kp W &kp E &morph_rshft
    &hwu LCTRL A &kp D &kp F &motap ENCODER C_PLAY_PAUSE &hwu LGUI C 
    &mt1 LS(LCTRL) Y &hwu LSHFT V &hwu LALT X>;
    sensor-bindings = <&rot_kp UP DOWN>; };

    INFINITE {
    bindings = <     
    &mt1 P LS(B) &kp K &e_cmdz &mtr O B       
    &mt1 BACKSLASH SLASH &kp W &kp F &motap ENCODER C_PLAY_PAUSE &hwu LALT C  
    &mt3 LG(U) LG(B) &hwu LSHFT T &hwu LGUI V>;       
    sensor-bindings = <&rot_kp LBKT RBKT>; };

    ARTSTUDIO {
    bindings = <
    &morph_q &kp W &kp E &hwu LC(LALT) R
    &hwu LCTRL A &kp D &kp F &motap ENCODER C_PLAY_PAUSE &hwu LALT C
    &mt1 LS(LCTRL) Y &hwu LSHFT V &hwu LGUI X>;   
    sensor-bindings = <&rot_kp LBKT RBKT>; };

    ENCODER {
    bindings = <
    &trans &trans &trans &trans
    &trans &trans &trans &trans &trans
    &trans &trans &trans>;
    sensor-bindings = <&rot_kp LEFT RIGHT>; };

    LAYERS {
    bindings = <
    &none &none &hwu LALT LA(LS(LG(I))) &hwu LSHFT LS(LG(I))
    &none &mt3 LG(U) LG(B) &mt3 N7 N6 &mt3 LS(LG(B)) LS(LG(U)) &mt3 LS(DEL) N                       
    &kp LA(M) &mt3 LSHFT LG(M) &mt3 LALT M>;
    sensor-bindings = <&rot_kp N1 N4>; };
    
    ROTATE {
    bindings = <
    &none &none &none &none
    &none &none &none &kp LA(LG(N0)) &kp SPACE
    &kp LS(EQUAL) &kp LG(EQUAL) &mtrv SLASH LG(EQUAL)>;
    sensor-bindings = <&rot_kp COMMA PERIOD>; };

    VIEW {
    bindings = <
    &none &none &none &none
    &kp SEMI &kp SQT &mt3 N7 N6 &kp TAB &kp SPACE
    &mt3 N9 N8 &mtrv SLASH LG(EQUAL) &kp LA(SPACE)>;
    sensor-bindings = <&rot_scroll SCRL_DOWN SCRL_UP>; };

    HISTORY {
    bindings = <
    &none &none &none &none
    &none &none &none &none &none
    &none &none &none>;
    sensor-bindings = <&rot_kp LG(Z) LS(LG(Z))>; };

    CENTERLEFT {
    bindings = <
    &none &none &mt3 LC(LA(LS(RBKT))) LC(LA(LS(LEFT))) &mt3 LC(LA(LS(BACKSLASH))) LC(LA(LS(RIGHT))) 
    &none &none &mt1 LC(LA(LS(SINGLE_QUOTE))) LC(LA(LS(SEMI))) &none &mt1 LC(LA(LS(LG(DOWN)))) LC(LA(LS(LG(UP))))  
    &mt1 LC(LA(LS(PERIOD))) LC(LA(LS(SLASH))) &kp LC(LA(LS(UP))) &kp LC(LA(LS(DOWN)))>;      
    sensor-bindings = <&rot_kp LC(LA(LS(N))) LC(LA(LS(M)))>; };

    MEDIA {
    bindings = <
    &none &mt3 LG(W) LA(P) &kp LS(LA(LG(BACKSLASH))) &bt BT_NXT
    &none &bt BT_SEL 0 &kp F4 &kp F4 &mt3 LC(LA(LS(W))) LC(LA(LS(X))) 
    &bt BT_SEL 1 &kp LC(LA(LS(V))) &kp LC(LA(LS(C)))>;    
    sensor-bindings = <&rot_kp C_VOL_DN C_VOL_UP>; };
            
    BLUE {
    bindings = <
    &rgb_ug RGB_EFF &rgb_ug RGB_BRI &rgb_ug RGB_SAI &rgb_ug RGB_EFF
    &none &rgb_ug RGB_BRD &rgb_ug RGB_SAD &bt BT_CLR_ALL &ext_power EP_TOG    
    &none &none &out OUT_TOG>;
    sensor-bindings = <&rgb_encoder>; };
    };
};